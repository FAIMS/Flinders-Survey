import java.util.concurrent.Callable;
/*** 'Editable' - you can edit the code below based on the needs ***/
User user; // don't touch
String userid;

addActionBarItem("sync", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Sync enabled";
    }
    actionOn() {
        setSyncEnabled(false);
        setFileSyncEnabled(false);
        showToast("Sync disabled.");
    }
    isActionOff() {
        isSyncEnabled();
    }
    actionOffLabel() {
        "Sync disabled";
    }
    actionOff() {
        setSyncEnabled(true);
        setFileSyncEnabled(true);
        showToast("Sync enabled.");
    }
});

addActionBarItem("internal_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Internal GPS enabled";
    }
    actionOn() {
        stopGPS();
        showToast("GPS disabled.");
    }
    isActionOff() {
        isInternalGPSOn();
    }
    actionOffLabel() {
        "Internal GPS disabled";
    }
    actionOff() {
        if(isExternalGPSOn()) {
            stopGPS();
        }
        startInternalGPS();
        showToast("GPS enabled. GPS refresh rate set to " + getFieldValue("control/Control/refreshText") + ". You can change it in the Control tab.");
    }
});

addActionBarItem("external_gps", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "External GPS enabled";
    }
    actionOn() {
        stopGPS();
        showToast("GPS disabled.");
    }
    isActionOff() {
        isExternalGPSOn();
    }
    actionOffLabel() {
        "External GPS disabled";
    }
    actionOff() {
        if(isInternalGPSOn()) {
            stopGPS();
        }
        startExternalGPS();
        if(isBluetoothConnected()) {
            showToast("GPS enabled. GPS refresh rate set to " + getFieldValue("control/Control/refreshText") + ". You can change it in the Control tab.");
        } else {
            showToast("Please enable bluetooth.");
            this.isActionOff();
        }
        
    }
});

addActionBarItem("time_tracklog", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Time Tracklog enabled";
    }
    actionOn() {
        stopTrack();
        showToast("Tracklog disabled.");
    }
    isActionOff() {
        tracklogState.equals("Time");
    }
    actionOffLabel() {
        "Time Tracklog disabled";
    }
    actionOff() {
        if(isInternalGPSOn() || isInternalGPSOn()) {
            startTimeTrack();
            showToast("Tracklog enabled. Tracklog time interval set to " + getFieldValue("control/Control/tracktimeText") + " seconds. You can change it in the Control tab.");    
        } else {
            showToast("GPS is not turned on.");
            this.isActionOff();
        }
        
    }
});

addActionBarItem("distance_tracklog", new ToggleActionButtonCallback() {
    actionOnLabel() {
        "Distance Tracklog enabled";
    }
    actionOn() {
        stopTrack();
        showToast("Tracklog disabled.");
    }
    isActionOff() {
        tracklogState.equals("Distance");
    }
    actionOffLabel() {
        "Distance Tracklog disabled";
    }
    actionOff() {
        if(isInternalGPSOn() || isInternalGPSOn()) {
            startDistTrack();
        showToast("Tracklog enabled. Tracklog distance interval set to " + getFieldValue("control/Control/trackdistText") + " metres. You can change it in the Control tab.");
        } else {
            showToast("GPS is not turned on.");
            this.isActionOff();
        }
    }
});

makeLocalID(){
    fetchOne("CREATE TABLE IF NOT EXISTS localSettings (key text primary key, value text);", null);
    fetchOne("drop view if exists identifierAsSpreadsheet;", null);
    fetchOne("create view identifierAsSpreadsheet as select uuid, group_concat(coalesce(measure || ' ' || vocabname || '(' ||freetext||')',  measure || ' (' || freetext ||')',  vocabname || ' (' || freetext ||')',  measure || ' ' || vocabname ,  vocabname || ' (' || freetext || ')',  measure || ' (' || freetext || ')',  measure,  vocabname,  freetext,  measure,  vocabname,  freetext), ' ') as response from (select * from latestNonDeletedArchentIdentifiers order by attributename) group by uuid;", null);
}

makeLocalID();

onEvent("control", "show", "resetGlobals();");

onEvent("control/Search/newSurveyUnit", "delayclick", "newSurveyUnit()");
onEvent("control/Search/newPOI", "delayclick", "newPOI()");

onEvent("control/Search/archentsRadio", "select", "showRecords();");

onEvent("control/Search", "show", "showRecords();showControl();");

onEvent("control/Search/listOfLast", "click", "loadRecord()");

resetGlobals() {
    removeNavigationButton("save");
    removeNavigationButton("delete");
}

showControlTab = 0;

showControl(){
    if (showControlTab < 2){
        showTab("control/Control");
        showControlTab++;
    }
}

showRecords(){
    if(isNull(getFieldValue("control/Search/listOfLastText"))) setFieldValue("control/Search/listOfLastText", "5");
    type = getFieldValue("control/Search/archentsRadio");
    fetchAll("select uuid, response from identifierAsSpreadsheet join latestnondeletedArchEnt using (uuid) join aenttype using (aenttypeid) where aenttypename like '%"+type+"%' order by aenttimestamp desc limit "+getFieldValue("control/Search/listOfLastText")+"+1;",
        new FetchCallback() {
            onFetch(result) {
                if (!isNull(result)){
                    populateList("control/Search/listOfLast", result);
                } else {
                    fetchOne("select '', 'No entries found';", new FetchCallback() {
                        onFetch(result) {
                            populateList("control/Search/listOfLast", result);
                        }
                    });
                }
            }
        });
}

loadRecord(){
    if (getListItemValue() != "" && !getListItemValue().equals("No entries found") ){
        if (getFieldValue("control/Search/archentsRadio").equals("Survey Unit")){
            loadSurveyUnit();
        } else if (getFieldValue("control/Search/archentsRadio").equals("POI")) {
            loadPOI();
        }
    }
}

//Control Logic

setFieldValue("control/Control/refreshText","60");

onEvent("control/Control/refreshGPSButton", "click", "startGPS()");
onEvent("control/Control/stopGPS", "click", "stopGPSLogic()");

//onEvent("control/Control/refreshButton", "click", "setGPSUpdateInterval("+getFieldValue("control/Control/refreshText")+")");

startGPS(){
    Object intext = getFieldValue("control/Control/internalExternalGPS");
    if(isNull(intext)){
        showWarning("Warning", "Please choose whether you would like to connect to internal or external GPS.");
        return;
    }
    setGPSUpdateInterval(Integer.parseInt(getFieldValue("control/Control/refreshText")));
    showToast("GPS enabled. GPS refresh rate set to " + getFieldValue("control/Control/refreshText") + ".");
    if(intext.equals("I")) { 
        if(isExternalGPSOn()) stopGPS();
        startInternalGPS();
    }
    if(intext.equals("E")) {
        if(isInternalGPSOn()) stopGPS();
        startExternalGPS();
    }
}

stopGPSLogic() {
    if(isInternalGPSOn() || isExternalGPSOn()) {
        showToast("GPS disabled.");
        stopGPS();    
    } else {
        showToast("GPS is not turned on.");
    }
    
}

//Tracklog

onEvent("control/Control/tracktimeButton", "click", "startTimeTrack()");
onEvent("control/Control/trackdistButton", "click", "startDistTrack()");
onEvent("control/Control/trackOffButton", "click", "stopTrack()");

setFieldValue("control/Control/tracktimeText", "30");
setFieldValue("control/Control/trackdistText", "100");
setFieldValue("control/Control/internalExternalGPS","I");

String tracklogStatus = "Tracklog is Stopped";
String tracklogState = "Stop";
numTracklogPoints = 0;
tracklogCurrentStatus = "";
numTransectPoints = 0;
stateAppend = "";

startTimeTrack(){
    stopTrack();
    if(isInternalGPSOn() || isExternalGPSOn()) {
        tracklogState = "Time";
        showToast("Tracklog enabled. Tracklog time interval set to " + getFieldValue("control/Control/tracktimeText") + " seconds.");    
        startTrackingGPS("time", Integer.parseInt(getFieldValue("control/Control/tracktimeText")), "saveGPSTrack()");
        updateTrackStatus();
    } else {
        showToast("GPS is not turned on.");
    }
}

startDistTrack(){
    stopTrack();
    if(isInternalGPSOn() || isExternalGPSOn()) {
        tracklogState = "Distance";
        showToast("Tracklog enabled. Tracklog distance interval set to " + getFieldValue("control/Control/trackdistText") + " metres.");
        startTrackingGPS("distance", Integer.parseInt(getFieldValue("control/Control/trackdistText")), "saveGPSTrack()");
        updateTrackStatus();
    } else {
        showToast("GPS is not turned on.");
    }
}

stopTrack(){
    stopTrackingGPS();
    numTracklogPoints = 0;
    numTransectPoints = 0;
    tracklogState = "Stopped";
    showToast("Tracklog disabled.");
    updateTrackStatus();
}

updateTrackStatus(){
    if (tracklogState.equals("Time")) {
        tracklogStatus = "Tracklog Started - Time: "+getFieldValue("control/Control/tracktimeText")+"s";
    } else if (tracklogState.equals("Distance")) {
        tracklogStatus = "Tracklog Started - Distance: "+getFieldValue("control/Control/trackdistText")+"m";
    } else {
        tracklogStatus = "Tracklog is "+tracklogState;
    }
    
    if (numTracklogPoints > 0) {
        tracklogStatus += "\nNumber Tracklog Points collected: "+numTracklogPoints;
    }
    if (numTransectPoints > 0) {
        tracklogStatus += "\nNumber current transect Points collected: "+numTransectPoints;
    }

    tracklogStatus += "\nCurrent GPS Estimated Accuracy: "+ getGPSEstimatedAccuracy();

    setFieldValue("control/Control/trackStatus", tracklogStatus);
    setFieldValue("Survey_Unit/Survey_Unit/trackStatus", tracklogStatus);
}

Boolean transectEnabled = false;


saveGPSTrack() {
    fetchOne("select vocabname from vocabulary where vocabid = "+getFieldValue("user/usertab/Team"), new FetchCallback() {
        onFetch(teamQuery) {
            position = getGPSPosition();
            if (position == null) {
                tracklogState = "Bad GPS Fix";
                return;
            }
            numTracklogPoints++;
            
            List attributes = createAttributeList();
            
            attributes.add(createEntityAttribute("Longitude", null, null, "" + position.getLongitude(), null));
            attributes.add(createEntityAttribute("Latitude", null, null, "" + position.getLatitude(), null ));
            attributes.add(createEntityAttribute("Heading", null, null, "" + getGPSHeading(), null));
            attributes.add(createEntityAttribute("Accuracy", null, null, "" + getGPSEstimatedAccuracy(), null));
            String date = new java.text.SimpleDateFormat("d-MMM-yy HH:MM:ss z").format(new Date());
            attributes.add(createEntityAttribute("Timestamp", null, null, "" + date, null));
            attributes.add(createEntityAttribute("TracklogTeam", teamQuery.get(0), null, null, null));

            
            positionProj = getGPSPositionProjected();
            Point p = new Point(new MapPos(positionProj.getLongitude(), positionProj.getLatitude()), null, (PointStyle) null, null);
            ArrayList l = new ArrayList();
            l.add(p);
            
            saveArchEnt(null, "Tracklog", l, attributes, new SaveCallback() {
                onSave(uuid, newRecord) {
                    if (transectEnabled){
                        numTransectPoints++;
                        attributes.add(createEntityAttribute("SUID", getFieldValue("Survey_Unit/Survey_Unit/Survey_Unit_ID"), null, null, null));
                        attributes.add(createEntityAttribute("Width", getFieldValue("Survey_Unit/Survey_Unit/Total_Transect_Width"), null, null, null));
                        if (!stateAppend.equals("")){
                            attributes.add(createEntityAttribute("State", stateAppend, null, null, null));
                            if(stateAppend.equals("End")) {
                                transectEnabled=false;
                            }
                            stateAppend = "";
                        }

                        p = new Point(new MapPos(positionProj.getLongitude(), positionProj.getLatitude()), null, (PointStyle) null, null);
                        l = new ArrayList();
                        l.add(p);
                        
                        saveArchEnt(null, "Transect", l, attributes, new SaveCallback() {
                            onSave(uuid, newRecord) {
                                transect_id = uuid;
                                saveEntitiesToRel("TransectSUI", transect_id, survey_unit_id);
                                updateTrackStatus();
                            }
                        });
                    }
                }
            });
        }
    });
}

//Survey Unit Logic
onEvent("Survey_Unit", "show", "autoSaveSurveyUnit();addSurveyUnitNavigation();");
onEvent("Survey_Unit/Survey_Unit/New_POI", "delayclick", "saveSurveyUnitNewPOI();");
onEvent("Survey_Unit/Survey_Unit/Finish_SUI", "delayclick", "finishSurveyUnit()");
onEvent("Survey_Unit/Survey_Unit/Attach_Photo", "click", "attachPictureTo(\"Survey_Unit/Survey_Unit/Photos\")");

String survey_unit_id = null;

newSurveyUnit(){
    if (transectEnabled) {
        showWarning("Already tracking!", "You are already in a Survey Unit! Loading it now.");
        loadSurveyUnitFrom(survey_unit_id);
        return;
    }
    position = getGPSPosition();
    if (position == null) {
        showWarning("Warning", "Your GPS is not initialized, you cannot create a Survey Unit until the GPS icon is blue.");
        return;
    }
    survey_unit_id = null;
    numTransectPoints = 0;
    stateAppend = "Start";
    newTabGroup("Survey_Unit");
    fetchOne("select datetime('now', 'localtime');", new FetchCallback() {
        onFetch(result) {
            setFieldValue("Survey_Unit/Survey_Unit/Timestamp", result.get(0));
        }
    });
    
    setFieldValue("Survey_Unit/Survey_Unit/Participants", getFieldValue("control/Search/TeamMember"));
    setFieldValue("Survey_Unit/Survey_Unit/Number_of_Walkers", getFieldValue("control/Search/Walker"));
    fetchOne("select value from localSettings where key = 'Team';", new FetchCallback() {
        onFetch(result) {
            setFieldValue("Survey_Unit/hidden/Device_ID", result.get(0));   
        }
    });
    autoNumSurveyUnit();
}

loadSurveyUnit() {
    survey_unit_id = getListItemValue();
    loadSurveyUnitFrom(survey_unit_id);
}

loadSurveyUnitFrom(archentid) {
    survey_unit_id = archentid;
    if (isNull(survey_unit_id)) {
        showToast("No Survey Unit selected");
        return;
    }

    showTabGroup("Survey_Unit", survey_unit_id, new FetchCallback() {
        onFetch(result) {
            fetchOne("select datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+survey_unit_id+"' group by uuid having min(aenttimestamp);",
                new FetchCallback() {
                    onFetch(result) {
                        setFieldValue("Survey_Unit/Survey_Unit/Timestamp", result.get(0));
                    }
                });
            updateTrackStatus();
            saveTabGroup("Survey_Unit", survey_unit_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    survey_unit_id = uuid;
                }
            }, true);
        }
    });
    
}

autoSaveSurveyUnit() {
    if (isNull(survey_unit_id)) return;
    saveTabGroup("Survey_Unit", survey_unit_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            survey_unit_id = uuid;
        }
    }, true);
}

saveSurveyUnit(SaveCallback callback) {
    if (isNull(getFieldValue("Survey_Unit/Survey_Unit/Survey_Unit_ID"))) {
        showWarning("Validation Error", "Cannot save Survey Unit without identifiers");
        return;
    }
    saveTabGroup("Survey_Unit", survey_unit_id, null, null, callback);
}

saveSurveyUnitNewPOI() {
    saveSurveyUnit(new SaveCallback() {
        onSave(uuid, newRecord) {
            survey_unit_id = uuid;
            newPOI();
        }
    });
}

finishSurveyUnit(){
    position = getGPSPosition();
    if (position == null) {
        showWarning("Warning", "You have lost your GPS signal, please wait until the GPS icon is blue before you finish you Survey Unit.");
        return;
    }
    saveSurveyUnit(new SaveCallback() {
        onSave(uuid, newRecord) {
            survey_unit_id = uuid;
            stateAppend="End";
            saveGPSTrack();
            cancelTabGroup("Survey_Unit", false);
        }
    });
}

deleteSurveyUnit(){
    if (!isNull(survey_unit_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Survey Unit!", "reallyDeleteSurveyUnit()", "doNotDelete()");
    } else {
        cancelTabGroup("Survey_Unit", true);
    }
}

reallyDeleteSurveyUnit() {
    deleteArchEnt(survey_unit_id);
    cancelTabGroup("Survey_Unit", false);
}


addSurveyUnitNavigation() {
    removeNavigationButton("save");
    removeNavigationButton("delete");

    addNavigationButton("save", new ActionButtonCallback() {
        actionOnLabel() {
            "Save {Survey_Unit}";
        }
        actionOn() {
            saveSurveyUnit(new SaveCallback() {
                onSave(uuid, newRecord) {
                    survey_unit_id = uuid;
                }
            });
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "Delete {Survey_Unit}";
        }
        actionOn() {
            deleteSurveyUnit();
        }
    }, "danger");
}

loadSurveyUnitAttributes() {
    makeVocab("RadioGroup", "Survey_Unit/hidden/Device_ID", "Device ID");
    populateHierarchicalDropDown("Survey_Unit/Survey_Unit/Landform_Pattern", "Landform pattern");
    populateHierarchicalDropDown("Survey_Unit/Survey_Unit/Landform_Element", "Landform element");
    populateHierarchicalDropDown("Survey_Unit/Survey_Unit/Vegetation_Structure_Upper", "Vegetation Structure–Upper");
    populateHierarchicalDropDown("Survey_Unit/Survey_Unit/Vegetation_Structure_Mid_stratum", "Vegetation Structure–Mid-stratum");
    populateHierarchicalDropDown("Survey_Unit/Survey_Unit/Vegetation_Structure_Ground_stratum", "Vegetation Structure–Ground stratum");
    makeVocab("DropDown", "Survey_Unit/Survey_Unit/Ground_Surface_Visibility", "Ground surface visibility");
}


autoNumSurveyUnit() {
    fetchOne("select foo as foo " +
      "from (select max(cast(measure as integer))+1 as foo " +
             "from latestnondeletedaentvalue join attributekey using (attributeid) " +
            "where uuid in (select uuid " +
                             "from latestnondeletedaentvalue ae " +
                             "join latestnondeletedarchent using (uuid) join aenttype using (aenttypeid) " +
                            "where aenttypename = 'Survey Unit') " +
              "and attributename = 'Survey Unit ID');", new FetchCallback() {
        onFetch(result) {
            if(isNull(result.get(0))) {
                setFieldValue("Survey_Unit/Survey_Unit/Survey_Unit_ID", "1");
            } else {
                setFieldValue("Survey_Unit/Survey_Unit/Survey_Unit_ID", result.get(0));    
            }
            transectEnabled = true;
            saveSurveyUnit(new SaveCallback() {
                onSave(uuid, newRecord) {
                    survey_unit_id = uuid;
                    saveGPSTrack();
                    saveTabGroup("Survey_Unit", survey_unit_id, null, null, new SaveCallback() {
                        onSave(uuid, newRecord) {
                            survey_unit_id = uuid;
                        }
                    }, true);
                }
            });
        }
    });
    
}

//Point of Interest Logic
onEvent("POI", "show", "addPOINavigation();");
onEvent("POI/POI/Attach_Photo", "click", "attachPictureTo(\"POI/POI/Photos\")");

String poi_id = null;

newPOI(){
    poi_id = null;
    newTabGroup("POI");
    setFieldValue("POI/POI/Recorded_By", username);
    fetchOne("select datetime('now', 'localtime');", new FetchCallback() {
        onFetch(result) {
            setFieldValue("POI/POI/Timestamp", result.get(0));
        }
    });    
    autoNumPOI();
}

loadPOI() {
    poi_id = getListItemValue();
    loadPOIFrom(poi_id);
}

loadPOIFrom(archentid) {
    poi_id = archentid;
    if (isNull(poi_id)) {
        showToast("No POI selected");
        return;
    }

    showTabGroup("POI", poi_id, new FetchCallback() {
        onFetch(result) {
            fetchOne("select fname || ' ' || lname from user join archentity using (userid) where uuid = '"+poi_id+"' group by uuid having min(aenttimestamp)",
                new FetchCallback() {
                    onFetch(result) {
                        setFieldValue("POI/POI/Recorded_By", result.get(0));
                    }
                });
            
            fetchOne("select datetime(aentTimestamp, 'localtime')  from archentity where uuid = '"+poi_id+"' group by uuid having min(aenttimestamp);",
                new FetchCallback() {
                    onFetch(result) {
                        setFieldValue("POI/POI/Timestamp", result.get(0));
                    }
                });
            saveTabGroup("POI", poi_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    poi_id = uuid;
                }
            }, true);
        }
    });
    
}

autoSavePOI() {
    if (isNull(poi_id)) return;
    saveTabGroup("POI", poi_id, null, null, new SaveCallback() {
        onSave(uuid, newRecord) {
            poi_id = uuid;
        }
    }, true);
}

savePOI(SaveCallback callback) {
    if (isNull(getFieldValue("POI/POI/POI_ID"))) {
        showWarning("Validation Error", "Cannot save POI without identifiers");
        return;
    }
    saveTabGroup("POI", poi_id, null, null, callback);
}

deletePOI(){
    if (!isNull(poi_id)) {
        showAlert("Confirm Deletion", "Press OK to Delete this Point of Interest!", "reallyDeletePOI()", "doNotDelete()");
    } else {
        cancelTabGroup("POI", true);
    }
}

reallyDeletePOI() {
    deleteArchEnt(poi_id);
    cancelTabGroup("POI", false);
}

addPOINavigation() {
    removeNavigationButton("save");
    removeNavigationButton("delete");

    addNavigationButton("save", new ActionButtonCallback() {
        actionOnLabel() {
            "Save {POI}";
        }
        actionOn() {
            savePOI(new SaveCallback() {
                onSave(uuid, newRecord) {
                    poi_id = uuid;
                }
            });
        }
    }, "success");

    addNavigationButton("delete", new ActionButtonCallback() {
        actionOnLabel() {
            "Delete {POI}";
        }
        actionOn() {
            deletePOI();
        }
    }, "danger");
}

loadPOIAttributes() {
    makeVocab("DropDown", "POI/POI/Feature_Type", "Feature Type");
}

autoNumPOI() {
    fetchOne("select foo as foo " +
      "from (select max(cast(measure as integer))+1 as foo " +
             "from latestnondeletedaentvalue join attributekey using (attributeid) " +
            "where uuid in (select uuid " +
                             "from latestnondeletedaentvalue ae " +
                             "join latestnondeletedarchent using (uuid) join aenttype using (aenttypeid) " +
                            "where aenttypename = 'POI') " +
              "and attributename = 'POI ID');", new FetchCallback() {
        onFetch(result) {
            if(isNull(result.get(0))) {
                setFieldValue("POI/POI/POI_ID", "1");
            } else {
                setFieldValue("POI/POI/POI_ID", result.get(0));    
            }
            saveTabGroup("POI", poi_id, null, null, new SaveCallback() {
                onSave(uuid, newRecord) {
                    poi_id = uuid;
                    saveTabGroup("POI", poi_id, null, null, new SaveCallback() {
                        onSave(uuid, newRecord) {
                            poi_id = uuid;
                        }
                    }, true);
                }
            });
            
        }
    });
}

/*** MISC ***/

saveEntitiesToRel(String type, String entity1, String entity2) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
        }
    });
}

saveEntitiesToRel(String type, String entity1, String entity2, Callable callback) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, null);
            addReln(entity2, rel_id, null);
            callback.call();
        }
    });
}

saveEntitiesToHierRel(String type, String entity1, String entity2, String e1verb, String e2verb) {
    if (isNull(entity1) || isNull(entity2)) return;
    saveRel(null, type, null, null, new SaveCallback() {
        onSave(rel_id, newRecord) {
            addReln(entity1, rel_id, e1verb);
            addReln(entity2, rel_id, e2verb);
        }
    });
}

makeVocab(String type, String path, String attrib){
    fetchAll("select vocabid, vocabname from vocabulary join attributekey using (attributeid) where attributename = '"+attrib+"' order by vocabcountorder",
        new FetchCallback() {
            onFetch(result) {
                if(type.equals("CheckBoxGroup")) {
                    populateCheckBoxGroup(path, result);
                } else if(type.equals("DropDown")) {
                    populateDropDown(path, result);
                } else if(type.equals("RadioGroup")) {
                    populateRadioGroup(path, result);
                } else if(type.equals("List")) {
                    populateList(path, result);
                }
            }
        });
}

doNotDelete(){
    showToast("Delete Cancelled.");
}


/*** 'Uneditable' - you can edit the code below with extreme precaution ***/

DATA_ENTRY_LAYER = "Transect Layer";
DATA_ENTRY_LAYER_ID = 0;

onEvent("control/Map", "show", "drawTransects();loadMapSettings();");
onEvent("control/Map/centre", "click", "centreOnMe();"); 
onEvent("control/Map/saveSettings", "click", "saveMapSettings();"); 

drawTransects(){
     fetchOne("SELECT uuid, geospatialcolumn FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Transect'", new FetchCallback() {
        onFetch(result) {
            geoms = result;
        }
    });
    ps = createPointStyle(10, Color.BLUE, 0.2f, 0.5f);
}

initMap() {
    setMapZoom("control/Map/map", 15.0f);

    DATA_ENTRY_LAYER_ID = createCanvasLayer("control/Map/map", DATA_ENTRY_LAYER);

    showBaseMap("control/Map/map", "Base Layer", "files/data/maps/RasterData.tif");

    isEntity = true;
    queryName = "Transects";
    querySQL = "SELECT uuid, aenttimestamp FROM latestNonDeletedArchEnt join aenttype using (aenttypeid) where aenttypename = 'Transect'";
        
    addDatabaseLayerQuery("control/Map/map", queryName, querySQL);

    addTrackLogLayerQuery("control/Map/map", "track log entities", 
        "SELECT uuid, max(aenttimestamp) as aenttimestamp " + 
        " FROM latestNonDeletedArchent join aenttype using (aenttypeid) " +
        " where aenttypename = 'Tracklog';");

    ps = createPointStyle(10, Color.BLUE, 0.2f, 0.5f);
    ls = createLineStyle(10, Color.GREEN, 0.05f, 0.3f, null);
    pos = createPolygonStyle(10, Color.parseColor("#440000FF"), createLineStyle(10, Color.parseColor("#AA000000"), 0.01f, 0.3f, null));
    ts = createTextStyle(10, Color.RED, 30, Typeface.SANS_SERIF);

    showDatabaseLayer("control/Map/map", "Saved Data Layer", isEntity, queryName, querySQL, ps, ls, pos, ts);
}

initMap();

centreOnMe() {
    if(!isExternalGPSOn() && !isInternalGPSOn()) {
        showToast("GPS is not enabled.");
    } else {
        centerOnCurrentPosition("control/Map/map");
    }
}

loadMapSettings() {
    jsonFile = getAttachedFilePath("files/data/saved_config.json");

    if(new File(jsonFile).exists()) loadMapViewConfiguration("control/Map/map", jsonFile, "showToast(\"Loaded map configuration\")");
}

saveMapSettings() {
    file = getAttachedFilePath("files/data/saved_config.json");
    saveMapViewConfiguration("control/Map/map", file, "showToast(\"Saved map configuration\")");
}

/*** USER ***/

populateListForUsers() {
    fetchAll("select userid, fname ||' ' || lname from user", new FetchCallback() {
        onFetch(result) {
            populateDropDown("user/usertab/users", result);        
        }
    });
    makeVocab("RadioGroup", "user/usertab/Team", "Device ID");

    fetchOne("select value from localSettings where key = 'Team';", new FetchCallback() {
        onFetch(result) {
            if (!isNull(result)){
                setFieldValue("user/usertab/Team", result.get(0));
            }
        }
    });
    fetchOne("select value from localSettings where key = 'User';", new FetchCallback() {
        onFetch(result) {
            if (!isNull(result)){
                setFieldValue("user/usertab/users", result.get(0));
            }
        }
    });
}

populateListForUsers();

String username = "";

login(){
    if(isNull(getFieldValue("user/usertab/Team")) || isNull(getFieldValue("user/usertab/users"))){
        showWarning("Warning", "Please select a User and a Team before logging in.");
    } else {
        fetchOne("select userid,fname,lname,email from user where userid='" + getFieldValue("user/usertab/users") + "';",
            new FetchCallback() {
                onFetch(result) {
                    User user = new User(result.get(0),result.get(1),result.get(2),result.get(3));
                    userid = result.get(0);
                    setUser(user);
                    username = result.get(1) + " " + result.get(2);
                    showTabGroup("control");

                    fetchOne("REPLACE INTO localSettings(key, value) VALUES('User', '"+userid+"');", null);
                    fetchOne("REPLACE INTO localSettings(key, value) VALUES('Team', '"+getFieldValue("user/usertab/Team")+"');", null);
                }
            });
    }
}

onEvent("user/usertab/login", "click", "login()");

/*** SYNC ***/

onEvent("control/Control/SyncOn", "click", "startSync()");
onEvent("control/Control/SyncOff", "click", "stopSync()");

setSyncMinInterval(10.0f);
setSyncMaxInterval(20.0f);
setSyncDelay(5.0f);

startSync() {
    setSyncEnabled(true);
    setFileSyncEnabled(true);
}

stopSync() {
    setSyncEnabled(false);
    setFileSyncEnabled(false);
}

loadSurveyUnitAttributes();
loadPOIAttributes();